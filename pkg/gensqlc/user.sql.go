// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package gensqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash) VALUES ($1, $2) RETURNING id, first_name, last_name, middle_name, email, password_hash, role, status, photo, phone, address, verified_token, last_activity, is_verified, created_at, updated_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.Photo,
		&i.Phone,
		&i.Address,
		&i.VerifiedToken,
		&i.LastActivity,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

type DeleteUserParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID)
	return err
}

const getOneByEmail = `-- name: GetOneByEmail :one
SELECT id, first_name, last_name, middle_name, email, password_hash, role, status, photo, phone, address, verified_token, last_activity, is_verified, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

type GetOneByEmailParams struct {
	Email string `json:"email"`
}

func (q *Queries) GetOneByEmail(ctx context.Context, arg GetOneByEmailParams) (*User, error) {
	row := q.db.QueryRow(ctx, getOneByEmail, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.Photo,
		&i.Phone,
		&i.Address,
		&i.VerifiedToken,
		&i.LastActivity,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, middle_name, email, password_hash, role, status, photo, phone, address, verified_token, last_activity, is_verified, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

type GetUserParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.Photo,
		&i.Phone,
		&i.Address,
		&i.VerifiedToken,
		&i.LastActivity,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    first_name = COALESCE($1, first_name),
    last_name = COALESCE($2, last_name),
    middle_name = COALESCE($3, middle_name),
    email = COALESCE($4, email),
    password_hash = COALESCE($5, password_hash),
    role = COALESCE($6, role),
    status = COALESCE($7, status),
    photo = COALESCE($8, photo),
    phone = COALESCE($9, phone),
    address = COALESCE($10, address),
    verified_token = COALESCE($11, verified_token),
    last_activity = COALESCE($12, last_activity),
    is_verified = COALESCE($13, is_verified),
    updated_at = COALESCE($14, updated_at)
WHERE id = $15
    RETURNING id, first_name, last_name, middle_name, email, password_hash, role, status, photo, phone, address, verified_token, last_activity, is_verified, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName     *string   `json:"first_name"`
	LastName      *string   `json:"last_name"`
	MiddleName    *string   `json:"middle_name"`
	Email         string    `json:"email"`
	PasswordHash  string    `json:"password_hash"`
	Role          string    `json:"role"`
	Status        string    `json:"status"`
	Photo         *string   `json:"photo"`
	Phone         *string   `json:"phone"`
	Address       *string   `json:"address"`
	VerifiedToken *string   `json:"verified_token"`
	LastActivity  string    `json:"last_activity"`
	IsVerified    bool      `json:"is_verified"`
	UpdatedAt     time.Time `json:"updated_at"`
	ID            uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.Status,
		arg.Photo,
		arg.Phone,
		arg.Address,
		arg.VerifiedToken,
		arg.LastActivity,
		arg.IsVerified,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.Photo,
		&i.Phone,
		&i.Address,
		&i.VerifiedToken,
		&i.LastActivity,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
